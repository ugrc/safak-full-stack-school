generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Cit {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  active      Boolean
  cobs        Cob[]
}

model Cob {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  cits        Cit[]
}

// Entity Framework
// https://www.servicenow.com/community/grc-articles/how-to-implement-the-entity-framework/ta-p/2385192

// Tier 1: Business, Tier 2: Application, Tier 3: IT Asset.
model EntityTier {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  label       String
  level       Int
  EntityClass EntityClass[]
}

model EntityClass {
  id               Int      @id // @default(autoincrement())
  name             String
  description      String?
  isRoot           Boolean?
  functionalDomain String? // 描述该实体类所属的业务域，必须人力资源、销售、财务等
  complianceScore  Int? // 合规得分，计算所得

  // 每个class可以有一个或多个predecessor, 但该parent的能汇聚到root.
  predecessors EntityClass[] @relation("EntityClassRollUpTo")
  successors   EntityClass[] @relation("EntityClassRollUpTo")

  tierId   Int?
  tier     EntityTier? @relation(fields: [tierId], references: [id])
  entities Entity[]    @relation("EntityClass")
}

model EntityType {
  id               Int      @id @default(autoincrement())
  name             String
  description      String?
  isActive         Boolean? @default(true)
  functionalDomain String? // 描述该实体类所属的业务域，必须人力资源、销售、财务等
  complianceScore  Int? // 合规得分，计算所得

  entities Entity[]
}

model Department {
  id             Int    @id @default(autoincrement())
  name           String
  description    String?
  departmentHead String?
  primaryContact String?

  parentID Int?
  parent   Department?  @relation("ParentChildren", fields: [parentID], references: [id])
  children Department[] @relation("ParentChildren")

  User   User[]
  Entity Entity[]
}

model User {
  id            Int     @id @default(autoincrement())
  userId        String
  password      String
  email         String?
  firstName     String?
  lastName      String?
  Title         String?
  calendar      String?
  timeZone      String?
  businessPhone String?
  mobilePhone   String?

  isActive           Boolean? @default(true)
  lockedOut          Boolean? @default(false)
  passwordNeedsReset Boolean? @default(false)

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  Location     Location[]

  entities Entity[] @relation("EntityOwner")
}

model Location {
  id         Int     @id @default(autoincrement())
  name       String?
  street     String?
  city       String?
  province   String?
  postalCode String?
  Country    String?
  fullName   String?
  phone      String?
  faxPhone   String?
  Parent     String?
  Latitude   Float?
  Longitude  Float?

  contactId Int?
  contact   User? @relation(fields: [contactId], references: [id])

  parentID Int?
  parent   Location?  @relation("ParentChildren", fields: [parentID], references: [id])
  children Location[] @relation("ParentChildren")
  Entity   Entity[]
}

model Entity {
  id               Int      @id @default(autoincrement())
  name             String
  description      String?
  isActive         Boolean?
  functionalDomain String? // 描述该实体类所属的业务域，必须人力资源、销售、财务等

  attestationFreqency String? //Weekly Annually Monthly Quarterly Semi-annually Daily
  complianceScore     Int?

  ownerId Int?
  owner   User? @relation("EntityOwner", fields: [ownerId], references: [id])

  entityClassId Int?
  entityClass   EntityClass? @relation("EntityClass", fields: [entityClassId], references: [id])

  locationId Int?
  location   Location? @relation(fields: [locationId], references: [id])

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])

  entityTypes EntityType[]
}
